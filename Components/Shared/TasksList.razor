@rendermode InteractiveServer
<div class="tableStyle">
    <button style="font-size: 20px;" class="m-3 btn btn-outline-dark" @onclick="(() => OpenTaskManager(null))">Create a new task</button>
    <table class="w-100 fs-3 table table-striped border border-dark">
        @if (takenTasks != null)
        {  
            <thead class="thead-dark">
                <tr>
                    <th>Status</th>
                    <th colspan="2">Task</th>
                </tr>   
            </thead>
            @foreach (Models.Task task in takenTasks)
            {
                <tbody>
                    <tr class="border border-dark">
                        <PrintSingleTask Task="task" StartTheTask="StartTask" OpenTheTaskManager="OpenTaskManager" 
                                         CompleteTheTask="CompleteTask" RemoveTheTask="OpenDeleteDialog"/>
                    </tr>
                </tbody>
            }   
        }   
    </table>
</div>
@if(TaskEditorOpen)
{
    <TaskEditorForm OnClose="OnTaskManagerClose" />
}

@if (DeleteDialogOpen)
{
    <ModalWindow Title="Are you sure?" Text="Do you want to delete this task?" OnClose="@OnDeleteDialogClose" DialogType="ModalWindow.ModalDialogType.DeleteCancel"></ModalWindow>
}

@code {
    private List<Models.Task>takenTasks;
    private int idTaskToDelete; 
    public bool DeleteDialogOpen{get;set;}
    public bool TaskEditorOpen{get;set;}


    protected override void OnInitialized() => LoadTasks();
    private void LoadTasks()
    {
        using var context = new Services.ApplicationDbContext();
        takenTasks = context.Tasks.Where(x =>x.User == System.Security.Principal.WindowsIdentity.GetCurrent().Name)
                                  .ToList();
    }


    private void StartTask(int Id)
    {
        using(var context = new Services.ApplicationDbContext())
        {
            var TaskToComplete = context.Tasks.Where(x => x.Id == Id).FirstOrDefault();
            if (TaskToComplete is Models.Task)
            {
                TaskToComplete.Status = Models.Status.InProgress;
            }
            context.SaveChanges();
        }
        LoadTasks();
    }
    private void CompleteTask(int Id)
    {
        using(var context = new Services.ApplicationDbContext())
        {
            var TaskToComplete = context.Tasks.Where(x => x.Id == Id).FirstOrDefault();
            if (TaskToComplete is Models.Task)
            {
                TaskToComplete.Status = Models.Status.Completed;
            }
            context.SaveChanges();
        }
        LoadTasks();
    }
    private void DeleteTask()
    {
        using(var context = new Services.ApplicationDbContext())
        {
            var TaskToDelete = context.Tasks.Where(x => x.Id == idTaskToDelete).FirstOrDefault();
            if (TaskToDelete is Models.Task)
            {
                context.Remove(TaskToDelete);
            }
            context.SaveChanges();
        }
        LoadTasks();
    }


    private void OpenTaskManager(Models.Task? task)
    {
        Shared.TaskEditorForm.TakeTask(task);
        TaskEditorOpen = true;
        StateHasChanged();
    }
    private void OnTaskManagerClose()
    {
        TaskEditorOpen = false;
        LoadTasks();
        StateHasChanged();
    }


    private void OnDeleteDialogClose(bool accepted)
    {
        if (accepted)
        {
            DeleteTask();
        }
        DeleteDialogOpen = false;
        StateHasChanged();
    }
    private void OpenDeleteDialog(int Id)
    {
        DeleteDialogOpen = true;  
        idTaskToDelete = Id;
        StateHasChanged();
    }


}  