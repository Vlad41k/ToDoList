@rendermode InteractiveServer
@{
    var showClass = IsVisible ? "d-block" : "d-none";
}

<div class="toast-container p-3 @showClass" data-bs-autohide="true" data-bs-delay="5000">
    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">@HeaderText</strong>
            <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
        </div>

        <div class="toast-body" style="background-color:rgb(247, 231, 205);">
            <div style="margin: 5px 5px 5px 5px;">Task name:</div>
            <input type="text" id="TaskName" name="TaskName" maxlength="20" @bind= "Task.Name" style="width: 200px;"/>
            <div style="margin: 5px 5px 5px 5px;">Task description:</div>
            <div><textarea id="taskDescription" name="taskDescription" rows="10" cols="25" @bind= "Task.Description"></textarea></div>
            <button class="TaskSubmit" @onclick="ManageTask" style="margin-top: 10px;">Submit</button>
        </div>
    </div>
</div>

@code {

    [Parameter] public Models.Task Task { get; set; } = new Models.Task("","");
    
    [Parameter] public bool IsVisible { get; set; }

    [Parameter] public EventCallback DataEdited { get; set; }

    public string? HeaderText { get; set; }

    public void Show(Models.Task? task, string headerText = "Task Editor")
    {
        Task = task is Models.Task? task : new Models.Task("","");
        HeaderText = headerText;
        IsVisible = true;
        StateHasChanged();
    }

    private void Close()
    {
        HeaderText = string.Empty;
        IsVisible = false;
        DataEdited.InvokeAsync();
        StateHasChanged();
    }
    private void ManageTask()
    {
        using (var context = new Services.ApplicationDbContext())
        {
            var task = Task;
            if(context.Tasks.Select(x => x.Id).Contains(task.Id))
            {
                var TaskToUpdate = context.Tasks.Where(x => x.Id == task.Id).FirstOrDefault();;
                if (TaskToUpdate is Models.Task)
                {
                    TaskToUpdate.Name = task.Name;
                    TaskToUpdate.Description = task.Description;
                }
            }
            else
            {
                context.Tasks.Add(task);
            }
            context.SaveChanges();
        }
        Close();
    }
}
