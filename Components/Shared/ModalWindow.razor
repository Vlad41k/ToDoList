<div class="modal fade show" style="display:block; background-color: rgba(10,10,10,.4);" aria-modal="true" role="dialog">
	<div class="modal-dialog" style="border-radius:0.2cm; box-shadow: #000000 0px 5px 20px;" role="document">
    	<div class="modal-content">
      		<div class="modal-header">
        		<h5 class="modal-title">@Title</h5>
        		<button type="button" class="btn-close" @onclick="@ModalCancel" data-dismiss="modal" aria-label="Close"></button>
      		</div>
      		<div class="modal-body">
        		<p>@Text</p>
      		</div>
      		<div class="modal-footer">
        		@switch (DialogType)
        		{
          			case ModalDialogType.Ok:
            			<button type="button" class="btn btn-primary" @onclick=@ModalOk>OK</button>
            		break;
          			case ModalDialogType.OkCancel:
            			<button type="button" class="btn btn-light" @onclick="@ModalCancel">Cancel</button>
            			<button type="button" class="btn btn-primary" @onclick=@ModalOk>OK</button>
            		break;
          			case ModalDialogType.DeleteCancel:
            			<button type="button" class="btn btn-light" @onclick="@ModalCancel">Cancel</button>
            			<button type="button" class="btn btn-danger" @onclick=@ModalOk>Delete</button>
            		break;
        		}
      		</div>
    	</div>
  	</div>
</div>

@code{
    [Parameter]
    public string Title {get;set;}
    [Parameter]
    public string Text {get;set;}
    [Parameter]
    public EventCallback<bool> OnClose {get;set;}
    [Parameter]
    public ModalDialogType DialogType { get; set; }
    
    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }
    private Task ModalOk()
    {
        return OnClose.InvokeAsync(true);
    }
    public enum ModalDialogType
    {
        Ok,
        OkCancel,
        DeleteCancel
    }
}