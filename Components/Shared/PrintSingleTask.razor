@rendermode InteractiveServer
            <td class="d-flex flex-row justify-content-center border-0 bg-transparent">
                <i class="@(Task.Status==Models.Status.NotStarted? "bi bi-circle-fill text-danger" : "")
                            @(Task.Status==Models.Status.InProgress? "bi bi-circle-fill text-primary" : "")
                            @(Task.Status==Models.Status.Completed? "bi bi-circle-fill text-success" : "")">  
                </i>
            </td>
            <td class="w-100 ">
                <button type="button" class=" d-flex w-100 border-0 bg-transparent" @onclick="(() => OpenTheTaskManager.InvokeAsync(Task))">@Task.Name</button>
            </td>

            <td class="d-flex flex-row-reverse border-0">
                <button type="button" class="border-0 bg-transparent" @onclick="() => RemoveTheTask.InvokeAsync(Task.Id)">
                    <i class="bi bi-x-octagon text-danger"></i>
                </button>
                @if(Task.Status == Models.Status.NotStarted)
                {
                    <button type="button" class="border-0 bg-transparent" @onclick="(() => StartTheTask.InvokeAsync(Task.Id))">
                        <i class="bi bi-caret-right-square text-success"></i>
                    </button>
                }
                @if(Task.Status == Models.Status.InProgress)
                {
                    <button type="button" class="border-0 bg-transparent" @onclick="(() => CompleteTheTask.InvokeAsync(Task.Id))">
                        <i class="bi bi-patch-check text-success"></i>
                    </button>
                }
            </td>
@code {
    [Parameter] public Models.Task Task { get; set; }
    [Parameter] public EventCallback<int> StartTheTask { get; set; }
    [Parameter] public EventCallback<int> CompleteTheTask { get; set; }
    [Parameter] public EventCallback<int> RemoveTheTask { get; set; }
    [Parameter] public EventCallback<Models.Task> OpenTheTaskManager { get; set; }
 
}  
