
<div class="modal fade show" style="display:block; background-color: rgba(10,10,10,.4);" aria-modal="true" role="dialog">
    <div class="modal-dialog" style="border-radius:0.2cm; box-shadow: #000000 0px 5px 20px;" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Task Editor</h5>
                <button type="button" class="btn-close" @onclick="@ModalClose" data-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm  Model="tempTask" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label class="form-label" for="name">Task name:</label>
                            <InputText class="form-control" id="name" @bind-Value="tempTask.Name" />
                            <ValidationMessage For="@(() => tempTask.Name)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label" for="descriotion">Task Description:</label>
                            <InputTextArea class="form-control" id="descriotion" @bind-Value="tempTask.Description" rows="4" />
                            <ValidationMessage For="@(() => tempTask.Description)" />
                        </div>
                        <div class="text-end">
                            <button class="btn btn-primary" type="submit">Submit</button>
                        </div>
                </EditForm>
            </div>
        </div> 
    </div>
</div>

@code{
    private static Models.Task tempTask = new Models.Task("","");
    [Parameter]
    public EventCallback<bool> OnClose {get;set;}
    
    public static void TakeTask(Models.Task? task)
    {
        tempTask = task is Models.Task? task : new Models.Task("","");
    }
    private Task ModalClose()
    {
        return OnClose.InvokeAsync(false);
    }
      private void HandleValidSubmit()
    {
        using (var context = new Services.ApplicationDbContext())
        {
            var task = tempTask;
            if(context.Tasks.Select(x => x.Id).Contains(task.Id))
            {
                var TaskToUpdate = context.Tasks.Where(x => x.Id == task.Id).FirstOrDefault();;
                if (TaskToUpdate is Models.Task)
                {
                    TaskToUpdate.Name = task.Name;
                    TaskToUpdate.Description = task.Description;
                }
            }
            else
            {
                context.Tasks.Add(task);
            }
            context.SaveChanges();
        }
        ModalClose();
    }
}